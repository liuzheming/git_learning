### 目的：
了解基本数据类型的常见问题，避免踩坑

### Checklist：
#### 一般注意事项：
1. 代码中避免使用魔法值了吗？
2. 代码考虑了除以0的错误了吗？
3. 类型转换很明显嘛？
4. 如果一条语句中存在两个不同类型的变量，那么这条语句5. 会像你期望的那样求职吗？
6. 代码避免了混合类型的比较了吗？
7. 程序编译时没有警告信息吗？
#### 整数：
1. 使用整数除法的表达式，能按照预期的那样工作吗？
2. 证书表达式避免了整数溢出问题了吗？
#### 浮点数：
1. 代码避免了对数量级相差巨大的数字做加减运算了吗？
2. 代码系统地阻止了舍入错误的发生了吗？
3. 代码避免对浮点数做等量比较了吗？
#### 字符和字符串：
1. 代码避免使用魔法字符和魔法字符串了吗？
2. 使用字符串时，避免了off-by-one错误了吗？(下标越界)
#### 布尔变量：
1. 程序用额外的布尔变量来说明判断条件了吗？
2. 程序用额外的布尔变量来简化条件判断了吗？
#### 枚举类型：
1. 程序使用枚举类型而非具名常量来提高可读性、可靠性和可修改性嘛？
2. 当变量的用法不能进使用true和false标识的时候，程序用枚举类型来取代布尔变量了吗？
3. 针对枚举类型的测试，检测了非法数据嘛？
4. 把枚举类型的第一项条目保留为“非法的”了吗？
#### 具名常量：
1. 程序用具名常量而不是神秘数值来声明数据和表示循环界限了吗？
2. 具名常量的使用一致吗？— — 没有在有些位置使用具名常量，又在其他位置使用文字量？
#### 数组
1. 所有数组下标都没有超出数组边界吗？
2. 数组引用没有出现off-by-one错误码？(下标越界)
3. 所有多维数组的小标顺序都正确嘛？
4. 在嵌套循环里，把正确的变量用于数组下标，来避免循环下标串话了吗？
#### 创建类型：
1. 程序对每一种可能变化的数据分别采用不同的类型吗？
2. 类型名是以该类型所表示的现实世界实体为导向，而不是3. 以编程语言类型为导向的嘛？
4. 你避免重新定义预定义类型了吗？
5. 简单的重新定义一个类型相比，你考虑过创建一个新类嘛？
#### 全局变量：
1. 除非绝对有必要才使用全局变量，不止因为他们很危险，还是因为你可以使用更好的其他方式来替代它。
2. 变量的命名规则能把局部数据、类数据和全局数据区分开吗？
3. 你对所有的全局变量都加以文档说明了吗？
4. 避免使用伪全局数据，即被四处传递且包含有杂乱数据的巨大对象了吗？
5. 用访问子程序来取代全局变量了吗？如果必须使用全局变量，那么就通过子程序来访问它。
6. 把访问子程序和数据组织到类里了吗？
7. 访问器子程序，提供了一个在底层数据类型实现之上的抽象层了吗？
