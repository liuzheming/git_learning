### 目的：
防止因非法输入而导致程序崩溃

### Checklist：
#### 一般注意事项
1. 子程序是否保护自己免遭有害数据的破坏？
2. 你用断言来说明编程假定吗？其中包括了前条件和后条件嘛？
3. 断言是否只用来说明从不该发生的情况？
4. 你是否在架构或高层设计中，规定了一组错误处理技术？
5. 你是否在架构或高层设计中，规定了错误处理应当倾向于健壮性还是正确性？
6. 你是否建立了隔栏，来遏制错误可能造成的破坏？是否减少了，其他需要关注错误处理的代码的数量？
7. 代码中，用到了用于辅助调试的代码了吗？
8. 如果要启用或者禁用辅助调试代码，是否需要大动干戈？
9. 在防御是编程过程中引入的代码，是否适量？既不过多，也不过少？
10. 你在开发阶段，是否使用了进攻式编程，来使得错误无法被忽略？
异常
11. 你在项目中，定义了一套标准化的异常处理方案了吗？
是否考虑过异常之外的其他替代方案？
12. 如果可能的话，是否在局部处理了错误，而不是把它当成异常抛到外部？
13. 代码是否包含了在构造函数和析构函数中抛出异常？
所有异常是否与抛出它们的子程序处于同一抽象层次上？
每个异常，是否都包含了关于异常发生时的所有背景信息？
14. 代码中是否没有使用空的catch语句？（如果确实有使用，那么是否明确说明了这种用法是适宜的）
安全
15. 检查有害输入的代码，是否也检查了，故意的缓存区溢出、SQL注入、HTML注入、整数溢出以及其他恶意数据？
16. 是否检查了所有的错误返回码？
17. 是否捕获了所有的异常？
18. 错误消息中，是否避免出现有助于攻击者攻入系统的信息？
